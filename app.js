////////////////////////////////////////////////////////////////////////////////////
// UI Vars 
////////////////////////////////////////////////////////////////////////////////////
const taskForm = document.getElementById('add-task-form');
const taskInput = document.getElementById('task');
const filterInput = document.getElementById('filter');
const formInputs = document.querySelectorAll('.form-input');
const taskListWrapper = document.querySelector('.task-list-wrapper');
const taskList = document.querySelector('.js-task-list');
const deleteItemLink = document.querySelector('.js-clear-tasks');

////////////////////////////////////////////////////////////////////////////////////
// Load Event Listeners
////////////////////////////////////////////////////////////////////////////////////
loadEventListeners();

////////////////////////////////////////////////////////////////////////////////////
// FUNCTION - Load All Event Listeners
////////////////////////////////////////////////////////////////////////////////////
function loadEventListeners() {

  // Create Local Storage Tasks
  document.addEventListener('DOMContentLoaded', createLocalStorageTasks) 

  document.addEventListener('DOMContentLoaded', showTasks) 

  // Create New Task Item
  taskForm.addEventListener('submit', addNewTask);

  // Delete All Items
  deleteItemLink.addEventListener('click', deleteAllItems);

  // Delete Single Item
  taskList.addEventListener('click', deleteItem);

  // Filter Task List Items 
  filterInput.addEventListener('keyup', filterTasks)

  // Add Form focus Class 
  addEventListenerByClass('form-input', 'focusin', addFocusedClass); 

  // Remove Form focus Class
  addEventListenerByClass('form-input', 'focusout', removeInputClass); 
}

////////////////////////////////////////////////////////////////////////////////////
// Function Show Tasks 
////////////////////////////////////////////////////////////////////////////////////
function showTasks() {
  
  const taskLI = document.querySelector('.js-task-list-item'); // Task List Item
  
  ////////////////////////////////////////////////////////////////////////////////////
  // IF ! Task List Item - Remove Active Class From Task List Wrapper
  ////////////////////////////////////////////////////////////////////////////////////
  if (!taskLI) {
    taskListWrapper.classList.remove("active");
  ////////////////////////////////////////////////////////////////////////////////////
  // ELSE - Add active Class To Task List Wrapper
  ////////////////////////////////////////////////////////////////////////////////////  
  } else {
    taskListWrapper.classList.add("active");
  }
}

////////////////////////////////////////////////////////////////////////////////////
// FUNCTION - Add Event Listener By Class
////////////////////////////////////////////////////////////////////////////////////
function addEventListenerByClass(className, event, fn) {
  
  const list = document.getElementsByClassName(className);
  ////////////////////////////////////////////////////////////////////////////////////
  // example
  ////////////////////////////////////////////////////////////////////////////////////
  for (let index = 0; index < list.length; index++) {
    list[index].addEventListener(event, fn, false);    
  }
}

////////////////////////////////////////////////////////////////////////////////////
// FUNCTION - Return Input Target Value
////////////////////////////////////////////////////////////////////////////////////
function isFilled(e) {
  return e.target.value;
}

////////////////////////////////////////////////////////////////////////////////////
// FUNCTION - Add Focused Class
////////////////////////////////////////////////////////////////////////////////////
function addFocusedClass(e) {
  this.parentNode.previousElementSibling.classList.add('focused', 'filling');  ; // label el.
  this.parentNode.classList.add('focused');  ; // input wrapper el.
} 

////////////////////////////////////////////////////////////////////////////////////
// FUNCTION - Add Focused Class
////////////////////////////////////////////////////////////////////////////////////
function removeInputClass(e) {
  this.parentNode.previousElementSibling.classList.remove("focused"); // label el.
  this.parentNode.classList.remove("focused"); // input wrapper el.
  
  ////////////////////////////////////////////////////////////////////////////////////
  // IF Input !isFilled = Remove Class 'filling'
  ////////////////////////////////////////////////////////////////////////////////////
  if(!isFilled(e)) {
    this.parentNode.previousElementSibling.classList.remove("filling"); // label el.
  }
} 




////////////////////////////////////////////////////////////////////////////////////
// FUNCTION - Create Task List Item HTML
////////////////////////////////////////////////////////////////////////////////////
function getLocalStorageTasks() {

  let tasks = []; // tasks = Array 

  ////////////////////////////////////////////////////////////////////////////////////
  // IF Local Storage 'tasks' value IS NOT null 
  ////////////////////////////////////////////////////////////////////////////////////
  if(localStorage.getItem('tasks') !== null){
    // tasks = Convert Local Storage String To Object 
    tasks = JSON.parse(localStorage.getItem('tasks'));
  } 

  // RETURN tasks
  return tasks;

}

////////////////////////////////////////////////////////////////////////////////////
// FUNCTION - Create Task List Item HTML
////////////////////////////////////////////////////////////////////////////////////
function createTaskHTML(taskText) {  
  // Add 'active' class to Task List Wrapper 
  taskListWrapper.classList.add("active");
  // Task List Inner HTML   
  taskList.innerHTML += `
    <li class="js-task-list-item task-list-item">${taskText}<a href="#" class="delete-item js-delete-item"><i class="icon icon-close-outline"></i></a></li>  
  `;

}

////////////////////////////////////////////////////////////////////////////////////
// FUNCTION - Create Local Storage Tasks
// ////////////////////////////////////////////////////////////////////////////////////
function createLocalStorageTasks() {

  tasks = getLocalStorageTasks(); 
  
  ////////////////////////////////////////////////////////////////////////////////////
  // For Each Tasks As Task
  ////////////////////////////////////////////////////////////////////////////////////
  tasks.forEach(task => {

    // Create Task HTML
    createTaskHTML(task);
  });

}

////////////////////////////////////////////////////////////////////////////////////
// FUNCTION - Add New Task 
////////////////////////////////////////////////////////////////////////////////////
function addNewTask(e) {    

  // Prevent Default
  e.preventDefault();
  
  ////////////////////////////////////////////////////////////////////////////////////
  // IF Task Input Value IS Empty
  ////////////////////////////////////////////////////////////////////////////////////
  if (taskInput.value === '') {
    
    // Alert User To Add Task 
    alert('Add a task!');
    
    // RETURN
    return;
  } 

  // Store Task Input Value In Local Storage
  storeInLocalStorage(taskInput.value);

  // Create Task HTML 
  createTaskHTML(taskInput.value);

  // Clear Input Value
  taskInput.value = '';

  // Remove 'filling' class from Input Wrapper
  taskInput.parentNode.previousElementSibling.classList.remove("filling"); // input wrapper el.

}

////////////////////////////////////////////////////////////////////////////////////
// FUNCTION - Delete All Items
////////////////////////////////////////////////////////////////////////////////////
function deleteAllItems(e) { 

  // Prevent Default
  e.preventDefault();

  ////////////////////////////////////////////////////////////////////////////////////
  // WHILE Task List Has First Child Element   
  ////////////////////////////////////////////////////////////////////////////////////
  while(taskList.firstElementChild) {

    // Remove First Child Element
    taskList.firstElementChild.remove();
  } 

  // Remove All Tasks From Local Storage
  localStorage.removeItem('tasks');

  // Remove Task List Wrapper 'active' Class
  taskListWrapper.classList.remove("active");
  
}

////////////////////////////////////////////////////////////////////////////////////
// FUNCTION - Delete Single Item 
////////////////////////////////////////////////////////////////////////////////////
function deleteItem(e) {
  
  // Variables
  const taskListItemLink =  e.target.parentElement;
  const taskListItem =  e.target.parentElement.parentElement;
  
  // Prevent Default
  e.preventDefault();

  ////////////////////////////////////////////////////////////////////////////////////
  // IF Task List Item Link Contains Class 'delete-item'
  ////////////////////////////////////////////////////////////////////////////////////
  if (taskListItemLink.classList.contains('delete-item')) {   
    
    // Remove Task List Item
    taskListItem.remove();

    // Remove Task List Item From Local Storage
    removeTaskFromLocalStorage(taskListItem);

  }

  // Show Tasks 
  showTasks();
}

////////////////////////////////////////////////////////////////////////////////////
// FUNCTION - Store In Local Storage
////////////////////////////////////////////////////////////////////////////////////
function storeInLocalStorage(task) {

  tasks = getLocalStorageTasks();

  // Push Task To Tasks Array 
  tasks.push(task);

  // Local Store Tasks Obj As String  
  localStorage.setItem('tasks', JSON.stringify(tasks));

}
////////////////////////////////////////////////////////////////////////////////////
// FUNCTION - Store In Local Storage
////////////////////////////////////////////////////////////////////////////////////
function removeTaskFromLocalStorage(taskItem) {

  tasks = getLocalStorageTasks();

  ////////////////////////////////////////////////////////////////////////////////////
  // For Each Tasks As Task
  ////////////////////////////////////////////////////////////////////////////////////
  tasks.forEach((task, index) => {
    ////////////////////////////////////////////////////////////////////////////////////
    // IF Task Item Text Content === Task
    ////////////////////////////////////////////////////////////////////////////////////
    if(taskItem.textContent === task) {
      // Remove Task From Tasks Array
      tasks.splice(index, 1);
    }    
  });

  // Local Store Tasks Obj As String  
  localStorage.setItem('tasks', JSON.stringify(tasks));

}

////////////////////////////////////////////////////////////////////////////////////
// FUNCTION - Filter Tasks
////////////////////////////////////////////////////////////////////////////////////
function filterTasks(e) {
  
  const text = e.target.value.toLowerCase();
  console.log(text);
  ////////////////////////////////////////////////////////////////////////////////////
  // FOREACH Task List Item AS Task 
  ////////////////////////////////////////////////////////////////////////////////////
  document.querySelectorAll('.task-list-item').forEach(task => {
    const item = task.firstChild.textContent;
    ////////////////////////////////////////////////////////////////////////////////////
    // IF Item == Text Display Block ELSE Display None
    ////////////////////////////////////////////////////////////////////////////////////
    if(item.toLowerCase().indexOf(text) != -1){
      task.style.display = 'block';
    } else {
      task.style.display = 'none';
    }
  });

}
